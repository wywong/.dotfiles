" set nocompatible for when I run vim with -u
set nocompatible

if has('win32')
  " use forward slashes
  set shellslash
endif

" turn syntax highlighting on
syntax enable
if has('gui_running')
  " GUI colors
  colorscheme wombat
  if has("gui_gtk2")
    set guifont=Inconsolata\ 11
  elseif has("gui_win32")
    set guifont=Consolas:h10:cANSI
  endif
else
  " Non-GUI (terminal) colors
  set t_Co=256
  " Set colorscheme
  colorscheme wombat256
  " Do not underline cursor line
  hi CursorLine term=NONE cterm=NONE
endif

" set character encoding used inside vim
set enc=utf-8
" set file encoding
set fenc=utf-8
" set terminal encoding
set termencoding=utf-8

" automatically read in changes of a modified file
set autoread

" automatically indent when starting a new line
set autoindent
" smart indenting
set smartindent

" tab width is 4 spaces
set tabstop=4
" tabs are expanded to 4 spaces
set softtabstop=4
" indent also with 4 spaces
set shiftwidth=4
" expand tabs to spaces
set expandtab

" Trailing whitespace is red
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
augroup HLTrailWS
  autocmd!
  autocmd BufWinEnter * if &modifiable  | match ExtraWhitespace /\s\+$/ | endif
  autocmd InsertEnter * if &modifiable  | match ExtraWhitespace /\s\+\%#\@<!$/ | endif
  autocmd InsertLeave * if &modifiable  | match ExtraWhitespace /\s\+$/ | endif
  autocmd BufWinLeave * if &modifiable  | call clearmatches() | endif
  " delete trailing whitespace on save
  autocmd BufWritePre * :%s/\s\+$//e
augroup END

augroup Filetype_Make
  autocmd!
  autocmd FileType make set noexpandtab
augroup END

set textwidth=80
set number
" show at least 5 lines above or below
set scrolloff=5
if v:version >= 703
  " enable relative line numbers
  augroup relNumbers
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * :setlocal relativenumber
    autocmd WinLeave * :setlocal norelativenumber
  augroup END
endif

" show matching brackets
set showmatch
" wildmenu settings
" full - next full match
" longest - complete until longest common string
set wildmode=longest:full
" list of file patterns to ignore
set wildignore=*.o,*.obj,*.swp,\.git
" enable wildmenu
set wildmenu

" wrap long lines according to breakat option
" default breakat - ^I!@*-+;:,./?
set wrap linebreak

" affects <BS>
" indent - allow backspacing autoindent
" eol - allow backspacing line breaks
" start - allow backspacing over the start of an insert
set backspace=indent,eol,start

" set leader key to space
let mapleader=" "

" directory for ~ files
let &backupdir=expand($VIMFILES) . "/tmp//"
" directory for .swp files
let &directory=expand($VIMFILES) . "/tmp//"

" netrw settings
" 3 - tree style
let g:netrw_liststyle = 3

" stl == statusline
"stl setup
set noruler
set laststatus=2

"tail of the filename
set stl =%#identifier#
set stl+=[%t]
set stl+=%*

"help file flag
set stl+=%h

"read only flag
set stl+=%#identifier#
set stl+=%r
set stl+=%*

"modified flag
set stl+=%#identifier#
set stl+=%m
set stl+=%*
"
"display a warning if &paste is set
set stl+=%#error#
set stl+=%{&paste?'[paste]':''}
set stl+=%*

" Truncate statusline here if too long
set stl+=%<

" left and right separator
set stl+=%=

" Full path
set stl+=%#identifier#
set stl+=[%F]
set stl+=%*

set stl+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
set stl+=%{&ff}] "file format

" column and lines numbers
set stl+=[%l/%L,
set stl+=%c]

" Enhanced keyboard mappings
" toggle expandtab
nnoremap <F3> :set noexpandtab!<CR>
" build using makeprg with <F7>
nnoremap <F5> :make<CR>
" build using makeprg with <F7>, in insert mode exit to command mode, save and compile
inoremap <F5> <ESC>:w<CR>:make<CR>
" build using makeprg with <S-F7>
nnoremap <S-F5> :make clean all<CR>

" disable ex mode
noremap Q <nop>

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" Window changing hotkeys
nnoremap <Leader>h <C-w>h
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k
nnoremap <Leader>l <C-w>l

" source local vimrc if it exists
if filereadable(glob(expand($HOME) . '/.vimrc.local'))
  source $HOME/.vimrc.local
endif
